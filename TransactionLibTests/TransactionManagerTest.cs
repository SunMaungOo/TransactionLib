using Microsoft.VisualStudio.TestTools.UnitTesting;
using TransactionLib;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Transactions;

namespace TransactionLib.Tests
{
    /// <summary>
    /// Replace Action with delegate if you want to work with .Net 2.0 (lowest .Net framework version)
    /// </summary>
    [TestClass()]
    public class TransactionManagerTest
    {
        private const string NAME_1 = "A";

        private const string NAME_2 = "B";

        private void AddName1(IList<string> list, bool isThrowException = false)
        {
            list.Add(NAME_1);

            if (isThrowException)
            {
                throw new Exception("Exception generated by AddName1 method");
            }
        }

        private void RollbackName1(IList<string> list)
        {
            list.Remove(NAME_1);
        }

        private void AddName2(IList<string> list, bool isThrowException = false)
        {
            list.Add(NAME_2);

            if (isThrowException)
            {
                throw new Exception("Exception generated by AddName2 method");
            }
        }

        private void RollbackName2(IList<string> list)
        {
            list.Remove(NAME_2);
        }

        /// <summary>
        /// Testing condition where everything work
        /// </summary>
        [TestMethod()]
        public void Test1()
        {
            IList<string> list = new List<string>();

            try
            {

                using (TransactionManager manager = new TransactionManager())
                {
                    manager.Create(() => { AddName1(list); }, () => { RollbackName1(list); });
                    manager.Create(() => { AddName2(list); }, () => { RollbackName2(list); });
                    manager.Commit();

                }

            }
            catch
            {

            }


            bool status = list.Contains(NAME_1) && list.Contains(NAME_2);

            Assert.IsTrue(status);



        }

        /// <summary>
        /// Testing condition where we forget to call Commit() method
        /// </summary>
        [TestMethod()]
        public void Test2()
        {
            IList<string> list = new List<string>();

            try
            {
                using (TransactionManager manager = new TransactionManager())
                {
                    manager.Create(() => { AddName1(list); }, () => { RollbackName1(list); });
                    manager.Create(() => { AddName2(list); }, () => { RollbackName2(list); });
                }

            }
            catch
            {

            }

            bool isContainName1 = list.Contains(NAME_1);

            bool isContainName2 = list.Contains(NAME_2);

            bool status = (!isContainName1 && !isContainName2);

            Assert.IsTrue(status);
        }

        /// <summary>
        /// Testing condition where the AddName1() method throw exception
        /// </summary>
        [TestMethod()]
        public void Test3()
        {
            IList<string> list = new List<string>();

            try
            {
                using (TransactionManager manager = new TransactionManager())
                {
                    manager.Create(() => { AddName1(list, true); }, () => { RollbackName1(list); });
                    manager.Create(() => { AddName2(list); }, () => { RollbackName2(list); });
                    manager.Commit();

                }


            }
            catch
            {

            }

            bool isContainName1 = list.Contains(NAME_1);

            bool isContainName2 = list.Contains(NAME_2);

            bool status = (!isContainName1 && !isContainName2);

            Assert.IsTrue(status);
        }

        /// <summary>
        /// Testing condition where the AddName2() method throw exception
        /// </summary>
        [TestMethod()]
        public void Test4()
        {
            IList<string> list = new List<string>();


            try
            {
                using (TransactionManager manager = new TransactionManager())
                {
                    manager.Create(() => { AddName1(list); }, () => { RollbackName1(list); });
                    manager.Create(() => { AddName2(list, true); }, () => { RollbackName2(list); });

                    manager.Commit();

                }

            }
            catch
            {

            }
            bool isContainName1 = list.Contains(NAME_1);

            bool isContainName2 = list.Contains(NAME_2);

            bool status = (!isContainName1 && !isContainName2);

            Assert.IsTrue(status);
        }

    }
}